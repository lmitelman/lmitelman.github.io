[{"content":" Communicating Sequential Processes, C.A.R. Hoare (1978). ","permalink":"https://lmitelman.github.io/posts/concurrency-parallelism/","summary":" Communicating Sequential Processes, C.A.R. Hoare (1978). ","title":"Concurrency vs. Parallelism"},{"content":"My team and I decided to take the leap, and use Go as the language of choice for our latest project.\nThis is a great opportunity for me to expand my skillset, and learn about Go\u0026rsquo;s unique features and benefits.\nAlthough I have several years of development experience, I have never used an alternative language to JavaScript or TypeScript, so in this post we will explore the features of Go and compare it to these other two languages:\nMachine-code conversion Link, Author/s (Year). ","permalink":"https://lmitelman.github.io/posts/to-go-or-not-to-go/","summary":"My team and I decided to take the leap, and use Go as the language of choice for our latest project.\nThis is a great opportunity for me to expand my skillset, and learn about Go\u0026rsquo;s unique features and benefits.\nAlthough I have several years of development experience, I have never used an alternative language to JavaScript or TypeScript, so in this post we will explore the features of Go and compare it to these other two languages:","title":"Go-ing on"},{"content":"A few weeks ago one of the best engineers in my team, the great Fer, made a comment in a pull request:\n\u0026ldquo;Remember not to break the Tell-Don\u0026rsquo;t-Ask principle.\u0026rdquo;\nLet\u0026rsquo;s talk a bit about this\u0026hellip;\nIn object-oriented software, a typical use case is to execute logic based on an object\u0026rsquo;s internal state. For example, sounding an alarm in case our thermometer reaches a certain temperature:\nclass Thermometer() { private temperature: number = 0; increaseTemperature(value: number): void { this.temperature = this.temperature + value; } askTemperature(): number { return this.temperature; } }; class Alarm() { sound(): void { console.log(\u0026#39;RIIING!\u0026#39;); } }; With this \u0026ldquo;asking\u0026rdquo; approach, to detect the temperature and sound an alarm, we should:\nconst thermometer = new Thermometer(); thermometer.increaseTemperature(35); const temperature = thermometer.askTemperature(); if (temperature \u0026gt; 30) { const alarm = new Alarm(); alarm.sound(); }; If you are doing this, chances are that the logic you are implementing should be the object\u0026rsquo;s responsibility. It is very likely that our thermometer should be in charge of sounding the alarm in case of reaching a certain temperature.\nProcedural code gets information then makes decisions. Object-oriented code tells objects to do things.\nSo, let\u0026rsquo;s refactor our classes with a \u0026ldquo;telling\u0026rdquo; approach\u0026hellip;\nclass Thermometer() { private temperature: number = 0; private alarm: Alarm; constructor(alarm: Alarm) { this.alarm = alarm; } increaseTemperature(value: number): void { this.temperature = this.temperature + value; if (this.temperature \u0026gt; 30) { this.alarm.sound(); }; } }; class Alarm() { sound(): void { console.log(\u0026#39;RIIING!\u0026#39;); } }; Now, instead of us checking the thermometer\u0026rsquo;s internal status to sound the alarm, we \u0026ldquo;tell\u0026rdquo; him to do that:\nconst alarm = new Alarm(); const thermometer = new Thermometer(alarm); thermometer.increaseTemperature(35); In conclusion, it is correct to \u0026ldquo;ask\u0026rdquo; for the state of an object and then execute a certain logic. However, if that logic is related to the object, it may need to be moved and be the responsibility of the object itself.\nThe Art of Enbugging, Andy Hunt and Dave Thomas (2003). ","permalink":"https://lmitelman.github.io/posts/tell-dont-ask/","summary":"A few weeks ago one of the best engineers in my team, the great Fer, made a comment in a pull request:\n\u0026ldquo;Remember not to break the Tell-Don\u0026rsquo;t-Ask principle.\u0026rdquo;\nLet\u0026rsquo;s talk a bit about this\u0026hellip;\nIn object-oriented software, a typical use case is to execute logic based on an object\u0026rsquo;s internal state. For example, sounding an alarm in case our thermometer reaches a certain temperature:\nclass Thermometer() { private temperature: number = 0; increaseTemperature(value: number): void { this.","title":"Tell-Donâ€™t-Ask"}]