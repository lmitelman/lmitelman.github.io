<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on lmitelman.com</title>
    <link>https://lmitelman.github.io/posts/</link>
    <description>Recent content in Posts on lmitelman.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 24 Feb 2023 20:33:12 -0300</lastBuildDate><atom:link href="https://lmitelman.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Concurrency vs. Parallelism</title>
      <link>https://lmitelman.github.io/posts/concurrency-parallelism/</link>
      <pubDate>Fri, 24 Feb 2023 20:33:12 -0300</pubDate>
      
      <guid>https://lmitelman.github.io/posts/concurrency-parallelism/</guid>
      <description> Communicating Sequential Processes, C.A.R. Hoare (1978). </description>
      <content:encoded><![CDATA[<!-- https://sharegpt.com/c/urK3m71 -->
<!-- https://stackoverflow.com/questions/1050222/what-is-the-difference-between-concurrency-and-parallelism -->
<hr>
<ul>
<li><em><a href="https://www.cs.cmu.edu/~crary/819-f09/Hoare78.pdf">Communicating Sequential Processes, C.A.R. Hoare (1978)</a>.</em></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Go-ing on</title>
      <link>https://lmitelman.github.io/posts/to-go-or-not-to-go/</link>
      <pubDate>Mon, 13 Feb 2023 20:33:12 -0300</pubDate>
      
      <guid>https://lmitelman.github.io/posts/to-go-or-not-to-go/</guid>
      <description>My team and I decided to take the leap, and use Go as the language of choice for our latest project.
This is a great opportunity for me to expand my skillset, and learn about Go&amp;rsquo;s unique features and benefits.
Although I have several years of development experience, I have never used an alternative language to JavaScript or TypeScript, so in this post we will explore the features of Go and compare it to these other two languages:</description>
      <content:encoded><![CDATA[<p>My team and I decided to take the leap, and use <a href="https://go.dev/">Go</a> as the language of choice for our latest project.</p>
<p>This is a great opportunity for me to expand my skillset, and learn about Go&rsquo;s unique features and benefits.</p>
<p>Although I have several years of development experience, I have never used an alternative language to <strong>JavaScript</strong> or <strong>TypeScript</strong>, so in this post we will explore the features of Go and compare it to these other two languages:</p>
</br>
<h4 id="insmachine-code-conversionins"><ins>Machine-code conversion</ins></h4>
<hr>
<ul>
<li><em><a href="https://media.pragprog.com/articles/jan_03_enbug.pdf">Link, Author/s (Year)</a>.</em></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Tell-Donâ€™t-Ask</title>
      <link>https://lmitelman.github.io/posts/tell-dont-ask/</link>
      <pubDate>Sun, 08 May 2022 21:33:12 -0300</pubDate>
      
      <guid>https://lmitelman.github.io/posts/tell-dont-ask/</guid>
      <description>A few weeks ago one of the best engineers in my team, the great Fer, made a comment in a pull request:
&amp;ldquo;Remember not to break the Tell-Don&amp;rsquo;t-Ask principle.&amp;rdquo;
Let&amp;rsquo;s talk a bit about this&amp;hellip;
In object-oriented software, a typical use case is to execute logic based on an object&amp;rsquo;s internal state. For example, sounding an alarm in case our thermometer reaches a certain temperature:
class Thermometer() { private temperature: number = 0; increaseTemperature(value: number): void { this.</description>
      <content:encoded><![CDATA[<p>A few weeks ago one of the best engineers in my team, the great <a href="https://github.com/hack2024">Fer</a>, made a comment in a pull request:</p>
<blockquote>
<p><em>&ldquo;Remember not to break the Tell-Don&rsquo;t-Ask principle.&rdquo;</em></p>
</blockquote>
<p>Let&rsquo;s talk a bit about this&hellip;</p>
<p>In object-oriented software, a typical use case is to execute logic based on an object&rsquo;s internal state.
For example, sounding an alarm in case our thermometer reaches a certain temperature:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Thermometer() {</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">temperature</span>: <span class="kt">number</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="nx">increaseTemperature</span><span class="p">(</span><span class="nx">value</span>: <span class="kt">number</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">temperature</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">temperature</span> <span class="o">+</span> <span class="nx">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">askTemperature</span><span class="p">()</span><span class="o">:</span> <span class="kt">number</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">temperature</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Alarm() {</span>
</span></span><span class="line"><span class="cl">  <span class="nx">sound</span><span class="p">()</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;RIIING!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>With this &ldquo;asking&rdquo; approach, to detect the temperature and sound an alarm, we should:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">thermometer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Thermometer</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">thermometer</span><span class="p">.</span><span class="nx">increaseTemperature</span><span class="p">(</span><span class="mi">35</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">temperature</span> <span class="o">=</span> <span class="nx">thermometer</span><span class="p">.</span><span class="nx">askTemperature</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">temperature</span> <span class="o">&gt;</span> <span class="mi">30</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">alarm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Alarm</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">alarm</span><span class="p">.</span><span class="nx">sound</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>If you are doing this, chances are that the logic you are implementing should be the object&rsquo;s responsibility.
It is very likely that our thermometer should be in charge of sounding the alarm in case of reaching a certain temperature.</p>
<blockquote>
<p>Procedural code gets information then makes decisions. Object-oriented code tells objects to do things.</p>
</blockquote>
<p>So, let&rsquo;s refactor our classes with a &ldquo;telling&rdquo; approach&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Thermometer() {</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">temperature</span>: <span class="kt">number</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">private</span> <span class="nx">alarm</span>: <span class="kt">Alarm</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">constructor</span><span class="p">(</span><span class="nx">alarm</span>: <span class="kt">Alarm</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">alarm</span> <span class="o">=</span> <span class="nx">alarm</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="nx">increaseTemperature</span><span class="p">(</span><span class="nx">value</span>: <span class="kt">number</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">temperature</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">temperature</span> <span class="o">+</span> <span class="nx">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">temperature</span> <span class="o">&gt;</span> <span class="mi">30</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">alarm</span><span class="p">.</span><span class="nx">sound</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Alarm() {</span>
</span></span><span class="line"><span class="cl">  <span class="nx">sound</span><span class="p">()</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;RIIING!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>Now, instead of us checking the thermometer&rsquo;s internal status to sound the alarm, we &ldquo;tell&rdquo; him to do that:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">alarm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Alarm</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">thermometer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Thermometer</span><span class="p">(</span><span class="nx">alarm</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">thermometer</span><span class="p">.</span><span class="nx">increaseTemperature</span><span class="p">(</span><span class="mi">35</span><span class="p">);</span>
</span></span></code></pre></div><p>In conclusion, it is correct to &ldquo;ask&rdquo; for the state of an object and then execute a certain logic. However, if that logic is related to the object, it may need to be moved and be the responsibility of the object itself.</p>
<hr>
<ul>
<li><em><a href="https://media.pragprog.com/articles/jan_03_enbug.pdf">The Art of Enbugging, Andy Hunt and Dave Thomas (2003)</a>.</em></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
